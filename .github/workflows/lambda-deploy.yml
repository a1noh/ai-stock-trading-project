name: Deploy AiStockTradingLambda

on:
  workflow_dispatch: # Allows manual triggering

jobs:
  deploy-lambda:
    runs-on: ubuntu-latest
    environment: production

    steps:

    # Checkout the code from the repository
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    # Set up Python
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'  # Specify the exact Python version

    # Install system dependencies (e.g., cmake for pyarrow)
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential

    # Clean up old dependencies
    - name: Clean up old dependencies
      run: |
        cd lambda/process_raw/
        rm -rf python/  # Remove existing dependencies if any

    # Install Python dependencies
    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install -r lambda/process_raw/requirements.txt -t lambda/process_raw/

    # Zip the Lambda function code and dependencies
    - name: Zip Lambda function code
      run: |
        cd lambda/process_raw/
        zip -r ai_stock_trading_lambda.zip . -x "*.git*" -x "*.github*"  # Exclude unnecessary files

    # Upload Lambda code to S3 with the same key (overwrite existing file)
    - name: Upload Lambda code to S3
      run: |
        aws s3 cp lambda/process_raw/ai_stock_trading_lambda.zip s3://ai-stock-trading-raw-data/code/ai_stock_trading_lambda.zip

    # Delete CloudFormation Stack if it exists in FAILED/ROLLBACK state
    - name: Delete CloudFormation stack if it exists in FAILED/ROLLBACK state
      run: |
        # Check if the stack exists
        STACK_EXISTS=$(aws cloudformation describe-stacks --stack-name ai-stock-trading-lambda-stack --query "Stacks[0].StackName" --output text || echo "Stack does not exist")
        
        if [[ "$STACK_EXISTS" == "Stack does not exist" ]]; then
          echo "Stack does not exist, skipping deletion."
        else
          # Check stack status
          STACK_STATUS=$(aws cloudformation describe-stacks --stack-name ai-stock-trading-lambda-stack --query "Stacks[0].StackStatus" --output text)
          if [[ "$STACK_STATUS" =~ (DELETE|FAILED|ROLLBACK) ]]; then
            echo "Stack in a failed state ($STACK_STATUS), deleting..."
            aws cloudformation describe-stack-resources --stack-name ai-stock-trading-lambda-stack

            # Wait for deletion to complete
            echo "Waiting for stack deletion to complete..."
            aws cloudformation wait stack-delete-complete --stack-name ai-stock-trading-lambda-stack
            echo "Stack deleted. Proceeding with deployment."  
          else
            echo "Stack not in a failed state ($STACK_STATUS), no deletion needed."
          fi
        fi

    # Deploy CloudFormation Stack with a new timestamp to force update
    - name: Deploy CloudFormation stack
      run: |
        TIMESTAMP=$(date +%s)
        aws cloudformation deploy \
          --template-file cloudformation/lambda.yaml \
          --stack-name ai-stock-trading-lambda-stack \
          --parameter-overrides LambdaCodeBucket=ai-stock-trading-raw-data LambdaCodeKey=code/ai_stock_trading_lambda.zip DeploymentTimestamp=$TIMESTAMP \
          --capabilities CAPABILITY_NAMED_IAM  \
          --no-fail-on-empty-changeset